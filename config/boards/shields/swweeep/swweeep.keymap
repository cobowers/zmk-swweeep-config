#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

// global config settings
#define TAPPING_TERM 190
#define QUICK_TAP 200
#define COMBO_TIMEOUT 30

// layer aliases
#define L_DEFAULT 0
#define L_NUM_SYM 1
#define L_NAV_MED 2
#define L_NUMPAD 3
#define L_GAMING 4
#define L_CONTROL 5

&mt {
    //flavor = "balanced";
    flavor = "tap-preferred";
    tapping-term-ms = <TAPPING_TERM>;
};

&lt {
    flavor = "balanced";
    tapping-term-ms = <175>;
    quick-tap-ms = <QUICK_TAP>;
};

/ {

        macros{
            m_aa: m_aa {
                label = "MACRO_DOUBLE_A";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings = <&macro_tap &kp A &kp A>;
            };
            m_cc: m_cc {
                label = "MACRO_DOUBLE_C";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings = <&macro_tap &kp C &kp C>;
            };
            m_vv: m_vv {
                label = "MACRO_DOUBLE_V";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings = <&macro_tap &kp V &kp V>;
            };
            m_xx: m_xx {
                label = "MACRO_DOUBLE_X";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings = <&macro_tap &kp X &kp X>;
            };
            m_tabtab: m_tabtab {
                label = "MACRO_DOUBLE_TAB";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings = <&macro_tap &kp TAB &kp TAB>;
            };
        };

        behaviors {
                // home row dual-function mods should not fire unexpectedly
		hm: homerow_mod {
		    compatible = "zmk,behavior-hold-tap";
		    label = "HOMEROW_MOD";
		    #binding-cells = <2>;
		    tapping-term-ms = <250>;
		    quick_tap_ms = <QUICK_TAP>;
		    flavor = "tap-preferred";
		    bindings = <&kp>, <&kp>;
		};
                // dual-purpose alt keys should favor alt (hold) rather than tap
		hpm: hold_preferred_modifiers {
		    compatible = "zmk,behavior-hold-tap";
		    label = "hpm";
		    #binding-cells = <2>;
		    tapping-term-ms = <175>;
		    quick_tap_ms = <QUICK_TAP>;
		    flavor = "hold-preferred";
		    bindings = <&kp>, <&kp>;
		};
                // home row shift mod requires some special settings to feel just right
		hs: homerow_shift {
		    compatible = "zmk,behavior-hold-tap";
		    label = "HOMEROW_SHIFT";
		    #binding-cells = <2>;
		    tapping-term-ms = <185>;
		    quick_tap_ms = <QUICK_TAP>;
		    flavor = "balanced";
		    bindings = <&kp>, <&kp>;
		};

                // embedded functions for tap-and-hold functionality
                th_macro_a: tap_hold_macro_a {
                    compatible = "zmk,behavior-hold-tap";
                    label = "TAP_THEN_HOLD_MACRO_A";
                    #binding-cells = <2>;
                    tapping-term-ms = <200>;
                    quick-tap-ms = <QUICK_TAP>;
                    flavor = "tap-preferred";
                    bindings = <&kp>, <&m_aa>;
                };
                th_macro_c: tap_hold_macro_c {
                    compatible = "zmk,behavior-hold-tap";
                    label = "TAP_THEN_HOLD_MACRO_C";
                    #binding-cells = <2>;
                    tapping-term-ms = <200>;
                    quick-tap-ms = <QUICK_TAP>;
                    flavor = "tap-preferred";
                    bindings = <&kp>, <&m_cc>;
                };
                th_macro_v: tap_hold_macro_v {
                    compatible = "zmk,behavior-hold-tap";
                    label = "TAP_THEN_HOLD_MACRO_V";
                    #binding-cells = <2>;
                    tapping-term-ms = <200>;
                    quick-tap-ms = <QUICK_TAP>;
                    flavor = "tap-preferred";
                    bindings = <&kp>, <&m_vv>;
                };
                th_macro_x: tap_hold_macro_x {
                    compatible = "zmk,behavior-hold-tap";
                    label = "TAP_THEN_HOLD_MACRO_X";
                    #binding-cells = <2>;
                    tapping-term-ms = <200>;
                    quick-tap-ms = <QUICK_TAP>;
                    flavor = "tap-preferred";
                    bindings = <&kp>, <&m_xx>;
                };
                th_macro_tab: tap_hold_macro_tab {
                    compatible = "zmk,behavior-hold-tap";
                    label = "TAP_THEN_HOLD_MACRO_TAB";
                    #binding-cells = <2>;
                    tapping-term-ms = <200>;
                    quick-tap-ms = <QUICK_TAP>;
                    flavor = "tap-preferred";
                    bindings = <&to>, <&m_tabtab>;
                };
                td0: tap_dance_0 {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TAP_DANCE_TO_NUMPAD_LAYER";
                    #binding-cells = <0>;
                    tapping-term-ms = <TAPPING_TERM>;
                    bindings = <&kp SPACE>, <&to L_NUMPAD>;
                };
                td1: tap_dance_1 {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TAP_DANCE_TO_GAMING_LAYER";
                    #binding-cells = <0>;
                    tapping-term-ms = <TAPPING_TERM>;
                    bindings = <&kp BSPC>, <&to L_GAMING>;
                };
                td2: tap_dance_2 {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TAP_DANCE_RESET_BOOTLOADER";
                    #binding-cells = <0>;
                    tapping-term-ms = <TAPPING_TERM>;
                    bindings = <&reset>, <&bootloader>;
                };
                th_a: tap_hold_a {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TAP_HOLD_CTRL_A";
                    #binding-cells = <0>;
                    tapping-term-ms = <TAPPING_TERM>;
                    bindings = <&hm LCTRL A>, <&th_macro_a LC(A) 0>;
                };
                th_c: tap_hold_c {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TAP_HOLD_CTRL_C";
                    #binding-cells = <0>;
                    tapping-term-ms = <TAPPING_TERM>;
                    bindings = <&kp C>, <&th_macro_c LC(C) 0>;
                };
                th_v: tap_hold_v {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TAP_HOLD_CTRL_V";
                    #binding-cells = <0>;
                    tapping-term-ms = <TAPPING_TERM>;
                    bindings = <&kp V>, <&th_macro_v LC(V) 0>;
                };
                th_x: tap_hold_x {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TAP_HOLD_CTRL_X";
                    #binding-cells = <0>;
                    tapping-term-ms = <TAPPING_TERM>;
                    bindings = <&kp X>, <&th_macro_x LC(X) 0>;
                };
                th_print_win: tap_hold_print_window {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TAP_HOLD_PRINT_WINDOW";
                    #binding-cells = <0>;
                    tapping-term-ms = <TAPPING_TERM>;
                    bindings = <&kp LA(PSCRN)>, <&kp PSCRN>;
                };
                th_tab_: tap_hold_tab {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TAP_HOLD_TAB";
                    #binding-cells = <0>;
                    tapping-term-ms = <TAPPING_TERM>;
                    bindings = <&kp TAB>, <&th_macro_tab L_NUMPAD 0>;
                };

        };

        combos {
                compatible = "zmk,combos";
                combo_grave {
                    timeout-ms = <COMBO_TIMEOUT>;
                    key-positions = <0 1>;
                    bindings = <&kp GRAVE>;
                    layers = <0>;
                };
                combo_tilde {
                    timeout-ms = <COMBO_TIMEOUT>;
                    key-positions = <1 2>;
                    bindings = <&kp TILDE>;
                    layers = <0>;
                };
                combo_pipe {
                    timeout-ms = <COMBO_TIMEOUT>;
                    key-positions = <2 3>;
                    bindings = <&kp PIPE>;
                    layers = <0>;
                };
                combo_minus {
                    timeout-ms = <COMBO_TIMEOUT>;
                    key-positions = <8 9>;
                    bindings = <&kp MINUS>;
                    layers = <0>;
                };
                combo_semicolon {
                    timeout-ms = <COMBO_TIMEOUT>;
                    key-positions = <18 19>;
                    bindings = <&kp SEMI>;
                    layers = <0>;
                };
                combo_reset_left {
                    timeout-ms = <COMBO_TIMEOUT>;
                    key-positions = <0 4>;
                    bindings = <&td2>;
                    layers = <0>;
                };
                combo_toggle_output {
                    timeout-ms = <COMBO_TIMEOUT>;
                    key-positions = <20 24>;
                    bindings = <&out OUT_TOG>;
                    layers = <0>;
                };
        };

    keymap {
        compatible = "zmk,keymap";

        default_layer { // 0 (L_DEFAULT)
            label = "Default";
            bindings = <
   &kp Q  &kp W       &kp F          &kp P          &kp B                     &kp J                &kp L             &kp U          &kp Y         &kp SQT
   &th_a  &hm LGUI R  &hm LALT S     &hs LSHFT T    &kp G                     &kp M                &hs RSHFT N       &hm RALT E     &hm RGUI I    &hm RCTRL O
   &kp Z  &th_x       &th_c          &kp D          &th_v                     &kp K                &kp H             &kp COMMA      &kp DOT       &kp FSLH
                      &kp RET        &mt LSHFT ESC  &lt L_NUM_SYM BSPC        &lt L_NAV_MED SPACE  &lt L_NUMPAD TAB  &kp DEL
            >;
        };

        number_symbol_layer {  // 1 (L_NUM_SYM)
            label = "Num/Sym";
            bindings = <
   &kp EXCL   &kp AT     &kp HASH  &kp DLLR      &kp PRCNT       &kp CARET  &kp AMPS      &kp KP_MULTIPLY  &kp LPAR  &kp RPAR
   &kp N1     &kp N2     &kp N3    &mt LSHFT N4  &kp N5          &kp N6     &mt RSHFT N7  &kp N8           &kp N9    &kp N0
   &kp BSLH   &kp COLON  &kp SEMI  &kp LBRC      &kp LBKT        &kp RBKT   &kp RBRC      &kp EQUAL        &kp PLUS  &kp MINUS
                         &trans    &trans        &trans          &td0       &trans        &trans
            >;
        };

        nav_media_layer {  // 2 (L_NAV_MED)
            label = "Nav/Media";
            bindings = <
   &kp F1     &kp F2         &kp F3      &kp F4        &kp F5               &kp F6     &kp F7       &kp F8       &kp F9     &kp F10
   &kp PG_UP  &th_print_win  &trans      &kp C_VOL_UP  &kp F11              &trans     &kp LEFT     &kp DOWN     &kp UP     &kp RIGHT
   &kp PG_DN  &kp SLCK       &kp C_MUTE  &kp C_VOL_DN  &kp F12              &trans     &trans       &trans       &trans     &trans
                             &trans      &td1          &mo L_CONTROL        &trans     &trans       &trans
            >;
        };


        numpad_layer {  // 3 (L_NUMPAD)
            label = "Numpad";
            bindings = <
   &trans  &trans  &trans  &trans  &trans               &kp KP_MULTIPLY  &kp KP_N7      &kp KP_N8  &kp KP_N9  &kp KP_MINUS
   &trans  &trans  &trans  &trans  &trans               &kp KP_DIVIDE    &kp KP_N4      &kp KP_N5  &kp KP_N6  &kp KP_PLUS
   &trans  &trans  &trans  &trans  &trans               &kp KP_N0        &kp KP_N1      &kp KP_N2  &kp KP_N3  &kp KP_DOT
                   &trans  &trans  &to L_DEFAULT        &trans           &to L_DEFAULT  &kp BSPC
            >;
        };

        gaming_layer {  // 4 (L_GAMING)
            label = "Gaming";
            bindings = <
   &kp TAB     &kp Q  &kp W     &kp E    &kp R            &trans         &trans  &trans  &trans  &trans
   &kp LSHIFT  &kp A  &kp S     &kp D    &kp F            &trans         &trans  &trans  &trans  &trans
   &kp LCTRL   &kp X  &kp C     &kp V    &kp B            &trans         &trans  &trans  &trans  &trans
                      &kp LALT  &kp ESC  &kp SPACE        &to L_DEFAULT  &trans  &trans
            >;
        };

        control_layer {  // 5 (L_CONTROL)
            label = "Control";
            bindings = <
   &bootloader   &trans        &trans        &trans        &reset              &reset  &trans  &trans  &trans  &bootloader
   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4        &trans  &trans  &trans  &trans  &out OUT_USB
   &bt BT_CLR    &trans        &trans        &trans        &trans              &trans  &trans  &trans  &trans  &out OUT_BLE
                               &trans        &trans        &trans              &trans  &trans  &trans
            >;
        };


    };

};
